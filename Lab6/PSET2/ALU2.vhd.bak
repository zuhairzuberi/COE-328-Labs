LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.NUMERIC_STD.ALL;
ENTITY ALU IS
PORT(
	Clock : IN STD_LOGIC; -- input clock signal
	A,B : IN UNSIGNED(7 DOWNTO 0); -- 8 bit inputs from the two latches  
	OP : IN UNSIGNED(15 DOWNTO 0); -- 16 bit selector for decoder operations
	Neg : OUT STD_LOGIC; -- result from the negative
	R1 : OUT UNSIGNED (3 DOWNTO 0); -- lower 4 bits of 8 bit result output 
	R2 : OUT UNSIGNED (3 DOWNTO 0)); -- higher 4 bits of 9 bit result output 
END ALU;

ARCHITECTURE calculation OF ALU IS
SIGNAL reg1, reg2, result : UNSIGNED(7 DOWNTO 0):= (OTHERS =>'0');
SIGNAL reg4 : UNSIGNED(0 TO 7);
BEGIN 
reg1 <= A; -- temporarily stores A in Reg1 local variable 
reg2 <= B; -- temporarily stores B in Reg2 local variable 
PROCESS(Clock, OP)
BEGIN 
	IF(rising_edge(Clock)) THEN 
		CASE OP IS -- Problem E
			WHEN "0000000000000001"=> -- Replace odd bits of A with odd bits of B
				
			WHEN "0000000000000010"=> -- NAND A and B
				result <= reg1 nand reg2;
				neg <= '0';
			WHEN "0000000000000100"=> -- Calculate summation of A and B and decrease it by 5
				
			WHEN "0000000000001000"=> -- Produce the 2's complement of B
				
			WHEN "0000000000010000"=> -- invert the even bits of B
				
			WHEN "0000000000100000"=> -- Shift A to left by 2 bits, input bit = 1
				
			WHEN "0000000001000000"=> -- Produce null on the output
				
			WHEN "0000000010000000"=> -- Produce 2's complement of A
				
			WHEN "0000000100000000"=> -- Rotate B to right by 2 bits
				result <= reg2 ror 2;
				neg <= '0'
			WHEN OTHERS =>
				
		END CASE;
	END IF;
END PROCESS;
R1 <= result(3 DOWNTO 0);
R2 <= result(7 DOWNTO 4);
END calculation;