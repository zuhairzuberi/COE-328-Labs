// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2021 10:51:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    StateMachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module StateMachine_vlg_sample_tst(
	clk,
	data_in,
	reset,
	sampler_tx
);
input  clk;
input  data_in;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_in or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module StateMachine_vlg_check_tst (
	ID_leds,
	ID_negleds,
	State_leds,
	State_negleds,
	sampler_rx
);
input [0:6] ID_leds;
input [0:6] ID_negleds;
input [0:6] State_leds;
input [0:6] State_negleds;
input sampler_rx;

reg [0:6] ID_leds_expected;
reg [0:6] ID_negleds_expected;
reg [0:6] State_leds_expected;
reg [0:6] State_negleds_expected;

reg [0:6] ID_leds_prev;
reg [0:6] ID_negleds_prev;
reg [0:6] State_leds_prev;
reg [0:6] State_negleds_prev;

reg [0:6] ID_leds_expected_prev;
reg [0:6] ID_negleds_expected_prev;
reg [0:6] State_leds_expected_prev;
reg [0:6] State_negleds_expected_prev;

reg [0:6] last_ID_leds_exp;
reg [0:6] last_ID_negleds_exp;
reg [0:6] last_State_leds_exp;
reg [0:6] last_State_negleds_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ID_leds_prev = ID_leds;
	ID_negleds_prev = ID_negleds;
	State_leds_prev = State_leds;
	State_negleds_prev = State_negleds;
end

// update expected /o prevs

always @(trigger)
begin
	ID_leds_expected_prev = ID_leds_expected;
	ID_negleds_expected_prev = ID_negleds_expected;
	State_leds_expected_prev = State_leds_expected;
	State_negleds_expected_prev = State_negleds_expected;
end


// expected ID_leds[ 6 ]
initial
begin
	ID_leds_expected[6] = 1'bX;
end 
// expected ID_leds[ 5 ]
initial
begin
	ID_leds_expected[5] = 1'bX;
end 
// expected ID_leds[ 4 ]
initial
begin
	ID_leds_expected[4] = 1'bX;
end 
// expected ID_leds[ 3 ]
initial
begin
	ID_leds_expected[3] = 1'bX;
end 
// expected ID_leds[ 2 ]
initial
begin
	ID_leds_expected[2] = 1'bX;
end 
// expected ID_leds[ 1 ]
initial
begin
	ID_leds_expected[1] = 1'bX;
end 
// expected ID_leds[ 0 ]
initial
begin
	ID_leds_expected[0] = 1'bX;
end 
// expected ID_negleds[ 6 ]
initial
begin
	ID_negleds_expected[6] = 1'bX;
end 
// expected ID_negleds[ 5 ]
initial
begin
	ID_negleds_expected[5] = 1'bX;
end 
// expected ID_negleds[ 4 ]
initial
begin
	ID_negleds_expected[4] = 1'bX;
end 
// expected ID_negleds[ 3 ]
initial
begin
	ID_negleds_expected[3] = 1'bX;
end 
// expected ID_negleds[ 2 ]
initial
begin
	ID_negleds_expected[2] = 1'bX;
end 
// expected ID_negleds[ 1 ]
initial
begin
	ID_negleds_expected[1] = 1'bX;
end 
// expected ID_negleds[ 0 ]
initial
begin
	ID_negleds_expected[0] = 1'bX;
end 
// expected State_leds[ 6 ]
initial
begin
	State_leds_expected[6] = 1'bX;
end 
// expected State_leds[ 5 ]
initial
begin
	State_leds_expected[5] = 1'bX;
end 
// expected State_leds[ 4 ]
initial
begin
	State_leds_expected[4] = 1'bX;
end 
// expected State_leds[ 3 ]
initial
begin
	State_leds_expected[3] = 1'bX;
end 
// expected State_leds[ 2 ]
initial
begin
	State_leds_expected[2] = 1'bX;
end 
// expected State_leds[ 1 ]
initial
begin
	State_leds_expected[1] = 1'bX;
end 
// expected State_leds[ 0 ]
initial
begin
	State_leds_expected[0] = 1'bX;
end 
// expected State_negleds[ 6 ]
initial
begin
	State_negleds_expected[6] = 1'bX;
end 
// expected State_negleds[ 5 ]
initial
begin
	State_negleds_expected[5] = 1'bX;
end 
// expected State_negleds[ 4 ]
initial
begin
	State_negleds_expected[4] = 1'bX;
end 
// expected State_negleds[ 3 ]
initial
begin
	State_negleds_expected[3] = 1'bX;
end 
// expected State_negleds[ 2 ]
initial
begin
	State_negleds_expected[2] = 1'bX;
end 
// expected State_negleds[ 1 ]
initial
begin
	State_negleds_expected[1] = 1'bX;
end 
// expected State_negleds[ 0 ]
initial
begin
	State_negleds_expected[0] = 1'bX;
end 
// generate trigger
always @(ID_leds_expected or ID_leds or ID_negleds_expected or ID_negleds or State_leds_expected or State_leds or State_negleds_expected or State_negleds)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ID_leds = %b | expected ID_negleds = %b | expected State_leds = %b | expected State_negleds = %b | ",ID_leds_expected_prev,ID_negleds_expected_prev,State_leds_expected_prev,State_negleds_expected_prev);
	$display("| real ID_leds = %b | real ID_negleds = %b | real State_leds = %b | real State_negleds = %b | ",ID_leds_prev,ID_negleds_prev,State_leds_prev,State_negleds_prev);
`endif
	if (
		( ID_leds_expected_prev[0] !== 1'bx ) && ( ID_leds_prev[0] !== ID_leds_expected_prev[0] )
		&& ((ID_leds_expected_prev[0] !== last_ID_leds_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[0] = ID_leds_expected_prev[0];
	end
	if (
		( ID_leds_expected_prev[1] !== 1'bx ) && ( ID_leds_prev[1] !== ID_leds_expected_prev[1] )
		&& ((ID_leds_expected_prev[1] !== last_ID_leds_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[1] = ID_leds_expected_prev[1];
	end
	if (
		( ID_leds_expected_prev[2] !== 1'bx ) && ( ID_leds_prev[2] !== ID_leds_expected_prev[2] )
		&& ((ID_leds_expected_prev[2] !== last_ID_leds_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[2] = ID_leds_expected_prev[2];
	end
	if (
		( ID_leds_expected_prev[3] !== 1'bx ) && ( ID_leds_prev[3] !== ID_leds_expected_prev[3] )
		&& ((ID_leds_expected_prev[3] !== last_ID_leds_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[3] = ID_leds_expected_prev[3];
	end
	if (
		( ID_leds_expected_prev[4] !== 1'bx ) && ( ID_leds_prev[4] !== ID_leds_expected_prev[4] )
		&& ((ID_leds_expected_prev[4] !== last_ID_leds_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[4] = ID_leds_expected_prev[4];
	end
	if (
		( ID_leds_expected_prev[5] !== 1'bx ) && ( ID_leds_prev[5] !== ID_leds_expected_prev[5] )
		&& ((ID_leds_expected_prev[5] !== last_ID_leds_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[5] = ID_leds_expected_prev[5];
	end
	if (
		( ID_leds_expected_prev[6] !== 1'bx ) && ( ID_leds_prev[6] !== ID_leds_expected_prev[6] )
		&& ((ID_leds_expected_prev[6] !== last_ID_leds_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_leds_expected_prev);
		$display ("     Real value = %b", ID_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ID_leds_exp[6] = ID_leds_expected_prev[6];
	end
	if (
		( ID_negleds_expected_prev[0] !== 1'bx ) && ( ID_negleds_prev[0] !== ID_negleds_expected_prev[0] )
		&& ((ID_negleds_expected_prev[0] !== last_ID_negleds_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[0] = ID_negleds_expected_prev[0];
	end
	if (
		( ID_negleds_expected_prev[1] !== 1'bx ) && ( ID_negleds_prev[1] !== ID_negleds_expected_prev[1] )
		&& ((ID_negleds_expected_prev[1] !== last_ID_negleds_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[1] = ID_negleds_expected_prev[1];
	end
	if (
		( ID_negleds_expected_prev[2] !== 1'bx ) && ( ID_negleds_prev[2] !== ID_negleds_expected_prev[2] )
		&& ((ID_negleds_expected_prev[2] !== last_ID_negleds_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[2] = ID_negleds_expected_prev[2];
	end
	if (
		( ID_negleds_expected_prev[3] !== 1'bx ) && ( ID_negleds_prev[3] !== ID_negleds_expected_prev[3] )
		&& ((ID_negleds_expected_prev[3] !== last_ID_negleds_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[3] = ID_negleds_expected_prev[3];
	end
	if (
		( ID_negleds_expected_prev[4] !== 1'bx ) && ( ID_negleds_prev[4] !== ID_negleds_expected_prev[4] )
		&& ((ID_negleds_expected_prev[4] !== last_ID_negleds_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[4] = ID_negleds_expected_prev[4];
	end
	if (
		( ID_negleds_expected_prev[5] !== 1'bx ) && ( ID_negleds_prev[5] !== ID_negleds_expected_prev[5] )
		&& ((ID_negleds_expected_prev[5] !== last_ID_negleds_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[5] = ID_negleds_expected_prev[5];
	end
	if (
		( ID_negleds_expected_prev[6] !== 1'bx ) && ( ID_negleds_prev[6] !== ID_negleds_expected_prev[6] )
		&& ((ID_negleds_expected_prev[6] !== last_ID_negleds_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ID_negleds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ID_negleds_expected_prev);
		$display ("     Real value = %b", ID_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ID_negleds_exp[6] = ID_negleds_expected_prev[6];
	end
	if (
		( State_leds_expected_prev[0] !== 1'bx ) && ( State_leds_prev[0] !== State_leds_expected_prev[0] )
		&& ((State_leds_expected_prev[0] !== last_State_leds_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[0] = State_leds_expected_prev[0];
	end
	if (
		( State_leds_expected_prev[1] !== 1'bx ) && ( State_leds_prev[1] !== State_leds_expected_prev[1] )
		&& ((State_leds_expected_prev[1] !== last_State_leds_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[1] = State_leds_expected_prev[1];
	end
	if (
		( State_leds_expected_prev[2] !== 1'bx ) && ( State_leds_prev[2] !== State_leds_expected_prev[2] )
		&& ((State_leds_expected_prev[2] !== last_State_leds_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[2] = State_leds_expected_prev[2];
	end
	if (
		( State_leds_expected_prev[3] !== 1'bx ) && ( State_leds_prev[3] !== State_leds_expected_prev[3] )
		&& ((State_leds_expected_prev[3] !== last_State_leds_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[3] = State_leds_expected_prev[3];
	end
	if (
		( State_leds_expected_prev[4] !== 1'bx ) && ( State_leds_prev[4] !== State_leds_expected_prev[4] )
		&& ((State_leds_expected_prev[4] !== last_State_leds_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[4] = State_leds_expected_prev[4];
	end
	if (
		( State_leds_expected_prev[5] !== 1'bx ) && ( State_leds_prev[5] !== State_leds_expected_prev[5] )
		&& ((State_leds_expected_prev[5] !== last_State_leds_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[5] = State_leds_expected_prev[5];
	end
	if (
		( State_leds_expected_prev[6] !== 1'bx ) && ( State_leds_prev[6] !== State_leds_expected_prev[6] )
		&& ((State_leds_expected_prev[6] !== last_State_leds_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_leds_expected_prev);
		$display ("     Real value = %b", State_leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_State_leds_exp[6] = State_leds_expected_prev[6];
	end
	if (
		( State_negleds_expected_prev[0] !== 1'bx ) && ( State_negleds_prev[0] !== State_negleds_expected_prev[0] )
		&& ((State_negleds_expected_prev[0] !== last_State_negleds_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[0] = State_negleds_expected_prev[0];
	end
	if (
		( State_negleds_expected_prev[1] !== 1'bx ) && ( State_negleds_prev[1] !== State_negleds_expected_prev[1] )
		&& ((State_negleds_expected_prev[1] !== last_State_negleds_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[1] = State_negleds_expected_prev[1];
	end
	if (
		( State_negleds_expected_prev[2] !== 1'bx ) && ( State_negleds_prev[2] !== State_negleds_expected_prev[2] )
		&& ((State_negleds_expected_prev[2] !== last_State_negleds_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[2] = State_negleds_expected_prev[2];
	end
	if (
		( State_negleds_expected_prev[3] !== 1'bx ) && ( State_negleds_prev[3] !== State_negleds_expected_prev[3] )
		&& ((State_negleds_expected_prev[3] !== last_State_negleds_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[3] = State_negleds_expected_prev[3];
	end
	if (
		( State_negleds_expected_prev[4] !== 1'bx ) && ( State_negleds_prev[4] !== State_negleds_expected_prev[4] )
		&& ((State_negleds_expected_prev[4] !== last_State_negleds_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[4] = State_negleds_expected_prev[4];
	end
	if (
		( State_negleds_expected_prev[5] !== 1'bx ) && ( State_negleds_prev[5] !== State_negleds_expected_prev[5] )
		&& ((State_negleds_expected_prev[5] !== last_State_negleds_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[5] = State_negleds_expected_prev[5];
	end
	if (
		( State_negleds_expected_prev[6] !== 1'bx ) && ( State_negleds_prev[6] !== State_negleds_expected_prev[6] )
		&& ((State_negleds_expected_prev[6] !== last_State_negleds_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port State_negleds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", State_negleds_expected_prev);
		$display ("     Real value = %b", State_negleds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_State_negleds_exp[6] = State_negleds_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#180000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module StateMachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data_in;
reg reset;
// wires                                               
wire [0:6] ID_leds;
wire [0:6] ID_negleds;
wire [0:6] State_leds;
wire [0:6] State_negleds;

wire sampler;                             

// assign statements (if any)                          
StateMachine i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.ID_leds(ID_leds),
	.ID_negleds(ID_negleds),
	.reset(reset),
	.State_leds(State_leds),
	.State_negleds(State_negleds)
);

// clk
initial
begin
	clk = 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

StateMachine_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_in(data_in),
	.reset(reset),
	.sampler_tx(sampler)
);

StateMachine_vlg_check_tst tb_out(
	.ID_leds(ID_leds),
	.ID_negleds(ID_negleds),
	.State_leds(State_leds),
	.State_negleds(State_negleds),
	.sampler_rx(sampler)
);
endmodule

